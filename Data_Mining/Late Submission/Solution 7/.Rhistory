abs(var(sampleV3_1)-var(stock$diffV3))
abs(quantile(sampleV3_1,.25)-quantile(stock$diffV3,.25))
abs(mean(sampleV3_2)-mean(stock$diffV3))
abs(max(sampleV3_2)-max(stock$diffV3))
abs(var(sampleV3_2)-var(stock$diffV3))
abs(quantile(sampleV3_2,.25)-quantile(stock$diffV3,.25))
#Column 10
mean(stock$diffV4)
max(stock$diffV4)
var(stock$diffV4)
quantile(stock$diffV4,.25)
#how much they differ?
abs(mean(sampleV4_1)-mean(stock$diffV4))
abs(max(sampleV4_1)-max(stock$diffV4))
abs(var(sampleV4_1)-var(stock$diffV4))
abs(quantile(sampleV4_1,.25)-quantile(stock$diffV4,.25))
abs(mean(sampleV4_2)-mean(stock$diffV4))
abs(max(sampleV4_2)-max(stock$diffV4))
abs(var(sampleV4_2)-var(stock$diffV4))
abs(quantile(sampleV4_2,.25)-quantile(stock$diffV4,.25))
#Column 11
mean(stock$diffV5)
max(stock$diffV5)
var(stock$diffV5)
quantile(stock$diffV5,.25)
#how much they differ?
abs(mean(sampleV5_1)-mean(stock$diffV5))
abs(max(sampleV5_1)-max(stock$diffV5))
abs(var(sampleV5_1)-var(stock$diffV5))
abs(quantile(sampleV5_1,.25)-quantile(stock$diffV5,.25))
abs(mean(sampleV5_2)-mean(stock$diffV5))
abs(max(sampleV5_2)-max(stock$diffV5))
abs(var(sampleV5_2)-var(stock$diffV5))
abs(quantile(sampleV5_2,.25)-quantile(stock$diffV5,.25))
#Column 12
mean(stock$diffV6)
max(stock$diffV6)
var(stock$diffV6)
quantile(stock$diffV6,.25)
#how much they differ?
abs(mean(sampleV6_1)-mean(stock$diffV6))
abs(max(sampleV6_1)-max(stock$diffV6))
abs(var(sampleV6_1)-var(stock$diffV6))
abs(quantile(sampleV6_1,.25)-quantile(stock$diffV6,.25))
abs(mean(sampleV6_2)-mean(stock$diffV6))
abs(max(sampleV6_2)-max(stock$diffV6))
abs(var(sampleV6_2)-var(stock$diffV6))
abs(quantile(sampleV6_2,.25)-quantile(stock$diffV6,.25))
#Column 13
mean(stock$diffV7)
max(stock$diffV7)
var(stock$diffV7)
quantile(stock$diffV7,.25)
#how much they differ?
abs(mean(sampleV7_1)-mean(stock$diffV7))
abs(max(sampleV7_1)-max(stock$diffV7))
abs(var(sampleV7_1)-var(stock$diffV7))
abs(quantile(sampleV7_1,.25)-quantile(stock$diffV7,.25))
abs(mean(sampleV7_2)-mean(stock$diffV7))
abs(max(sampleV7_2)-max(stock$diffV7))
abs(var(sampleV7_2)-var(stock$diffV7))
abs(quantile(sampleV7_2,.25)-quantile(stock$diffV7,.25))
#Use R to produce a single graph displaying a boxplot for open, close, high and low.
#Include the R commands and the plot.
boxplot(stock$diffV2,
stock$diffV3,
stock$diffV4,
stock$diffV5,
stock$diffV6,
stock$diffV7
,col = 'blue', main = 'Boxplot', names=c("Open","High", "Low", "Close", "volume", "adj"))
#Use R to produce a frequency histogram for Close values. Use intervals of width 2000 beginning at 0
stock$c = as.numeric(stock$V4)
hist(stock$c,breaks=seq(0,20000,by=2000),col='blue',xlab = "Close",ylab = "Frequency",main = "Histogram Plot")
setwd("~/")
getwd()
setwd(".\Exam\BSE_Sensex_Index.csv")
setwd("./Exam/BSE_Sensex_Index.csv")
setwd("BSE_Sensex_Index.csv")
setwd("C:\Users\MEESALA ARAVIND\Documents\Exam\BSE_Sensex_Index.csv")
setwd("C:/Users/MEESALA ARAVIND/Documents/Exam/BSE_Sensex_Index.csv")
setwd("C:/Users/MEESALA ARAVIND/Documents/Exam/BSE_Sensex_Index.csv")
getwd()
setwd("C:/Users/MEESALA ARAVIND/Documents/Exam/BSE_Sensex_Index.csv")
data <- read.csv("BSE_Sensex_Index.csv",header= TRUE)
head(data)
names(data)
str(data)
Sample_1000 <- sample(seq(1,length(data[,1])), 1000, replace=T)
Sample_3000 <- sample(seq(1,length(data[,1])), 3000, replace=T)
summary(data)
is.null(data)
sample_1<-data[Sample_1000,1]
sample_2<-data[Sample_3000,1]
mean(Sample_1000)
max(Sample_1000)
var(Sample_1000)
mean(Sample_3000)
max(Sample_3000)
var(Sample_3000)
quantile(Sample_1000,.25)
quantile(Sample_3000,.25)
mean(data[,2])
max(data[,2])
var(data[,2])
quantile((data[,2]),.25)
mean(data, na.rm = TRUE)
mean(data$V1)
summary(Sample_1000)
sapply(data, class)
data$V2<-as.factor(data$V2)
data$V3<-as.factor(data$V3)
data$V4<-as.factor(data$V4)
data$V5<-as.factor(data$V5)
data$V6<-as.integer(data$V6)
data$V7<-as.factor(data$V7)
sapply(df, class)
sapply(data, class)
summary(data)
library(ggplot2)
ggplot(data = data,mapping = aes(x=V2,y= V7))+geom_boxplot()+ labs(
x="SNSEX DETAILS",y = "STOCK PRICES")
)
help("hist")
hist(data$V7,main="histogram",xlab = "closer values",xlim=(0,2000),col="blue",freq = FALSE)
hist(Adj Close)
data <- read.csv("BSE_Sensex_Index.csv",header= TRUE)
setwd("E:/2ndMSIT/Intro_to_ML/DataScience_2019501037/Data_Mining/Exam")
data <- read.csv("BSE_Sensex_Index.csv",header= TRUE)
data <- read.csv("BSE_Sensex_Index.csv",header= TRUE)
head(data)
names(data)
str(data)
Sample_1000 <- sample(seq(1,length(data[,1])), 1000, replace=T)
Sample_3000 <- sample(seq(1,length(data[,1])), 3000, replace=T)
summary(data)
is.null(data)
sample_1<-data[Sample_1000,1]
sample_2<-data[Sample_3000,1]
mean(Sample_1000)
max(Sample_1000)
var(Sample_1000)
mean(Sample_3000)
max(Sample_3000)
var(Sample_3000)
quantile(Sample_1000,.25)
quantile(Sample_3000,.25)
mean(data[,2])
max(data[,2])
var(data[,2])
quantile((data[,2]),.25)
mean(data, na.rm = TRUE)
mean(data$V1)
summary(Sample_1000)
sapply(data, class)
data$V2<-as.factor(data$V2)
data$V3<-as.factor(data$V3)
data$V4<-as.factor(data$V4)
data$V5<-as.factor(data$V5)
data$V6<-as.integer(data$V6)
data$V7<-as.factor(data$V7)
sapply(df, class)
sapply(data, class)
summary(data)
library(ggplot2)
ggplot(data = data,mapping = aes(x=V2,y= V7))+geom_boxplot()+ labs(
x="SNSEX DETAILS",y = "STOCK PRICES")
)
help("hist")
hist(data$V7,main="histogram",xlab = "closer values",xlim=(0,2000),col="blue",freq = FALSE)
hist(Adj Close)
data <- read.csv("BSE_Sensex_Index.csv",header= TRUE)
head(data)
names(data)
str(data)
Sample_1000 <- sample(seq(1,length(data[,1])), 1000, replace=T)
Sample_3000 <- sample(seq(1,length(data[,1])), 3000, replace=T)
summary(data)
is.null(data)
sample_1<-data[Sample_1000,1]
sample_2<-data[Sample_3000,1]
mean(Sample_1000)
max(Sample_1000)
var(Sample_1000)
mean(Sample_3000)
max(Sample_3000)
var(Sample_3000)
quantile(Sample_1000,.25)
quantile(Sample_3000,.25)
mean(data[,2])
max(data[,2])
var(data[,2])
quantile((data[,2]),.25)
mean(data, na.rm = TRUE)
mean(data$V1)
summary(Sample_1000)
sapply(data, class)
data$V2<-as.factor(data$V2)
getwd()
stock = read.csv("BSE_Sensex_Index.csv",header = FALSE)
str(stock)
summary(stock)
#create an extra column of successive differences for each column of numeric values in this data file
stock$diffV2 <- c(0, diff(stock$V2))
stock$diffV3 <- c(0, diff(stock$V3))
stock$diffV4 <- c(0, diff(stock$V4))
data <- read.csv("BSE_Sensex_Index.csv",header= TRUE)
head(data)
names(data)
str(data)
Sample_1000 <- sample(seq(1,length(data[,1])), 1000, replace=T)
Sample_3000 <- sample(seq(1,length(data[,1])), 3000, replace=T)
mean(Sample_1000)
max(Sample_1000)
var(Sample_1000)
mean(Sample_3000)
max(Sample_3000)
var(Sample_3000)
quantile(Sample_1000,.25)
quantile(Sample_3000,.25)
open <- data$Open
high <- data$High
low <- data$Low
close <- data$Close
boxplot (open, high, low, close,
main = "Boxplot for the values",
names = c ("Open", "High", "Low", "Close"),
col = c ("red", "grey","blue","white"),
horizontal = TRUE,
notch = TRUE)
hist(data$Close, ylim = c(0,2000), col="turquoise",main = "BSE Sensex clouser", xlab="Adj Clouser points")
open <- data$Open
high <- data$High
low <- data$Low
close <- data$Close
boxplot (open, high, low, close,
main = "Boxplot for the values",
names = c ("Open", "High", "Low", "Close"),
col = c ("red", "grey","blue","white"),
horizontal = TRUE,
notch = TRUE)
data <- read.csv("BSE_Sensex_Index.csv",header= TRUE)
head(data)
names(data)
str(data)
Sample_1000 <- sample(seq(1,length(data[,1])), 1000, replace=T)
Sample_3000 <- sample(seq(1,length(data[,1])), 3000, replace=T)
mean(Sample_1000)
max(Sample_1000)
var(Sample_1000)
mean(Sample_3000)
max(Sample_3000)
var(Sample_3000)
quantile(Sample_1000,.25)
quantile(Sample_3000,.25)
summary(data)
transaction <- read.csv("transactions.csv")
names(transaction)
transaction$TID <- NULL
colnames(transaction) <- c("ItemList")
names(transaction)
write.csv(transaction,'ItemList.csv',quote = FALSE,row.names = TRUE)
install.packages("arules")
library(arules)
txn = read.transactions(file="ItemList.csv",rm.duplicates=TRUE,format="basket",sep=",",cols=1);
txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
basket_rules <- apriori(txn,parameter = list(sup = 0.01,target = "rules"))
if (sessionInfo()['basepkgs']=="tm" | sessionInfo()['otherpkgs']=='tm'){
detach(package:tm,unload=TRUE)
}
inspect(basket_rules)
transaction <- read.csv("transactions.csv")
names(transaction)
transaction$TID <- NULL
colnames(transaction) <- c("ItemList")
names(transaction)
write.csv(transaction,'ItemList.csv',quote = FALSE,row.names = TRUE)
install.packages("arules")
library(arules)
txn = read.transactions(file="ItemList.csv",rm.duplicates=TRUE,format="basket",sep=",",cols=1);
txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
basket_rules <- apriori(txn,parameter = list(sup = 0.01,target = "rules"))
if (sessionInfo()['basepkgs']=="tm" | sessionInfo()['otherpkgs']=='tm'){
detach(package:tm,unload=TRUE)
}
inspect(basket_rules)
sensex_data <- read.csv("BSE_Sensex_Index.csv")
View(sensex_data)
growth_rate <- c()
for(i in 1:15446){
growth_rate[i] <- (sensex_data$Close[i] - sensex_data$Close[i+1])/sensex_data$Close[i+1]
}
growth_rate[15447]<- (growth_rate[15446] +growth_rate[15445]+growth_rate[15444])/3
growth_rate[15447]
z_growth_rate <- c()
mean <- mean(growth_rate)
mean
sd <- sd(growth_rate)
sd
for (j in 1:15447){
z_growth_rate[j] <- (growth_rate[j] - mean)/(sd)
}
outlier_dates <- c()
count <- 0
date <- 1
for (k in 1:15447){
if(z_growth_rate[k] > 3){
count <- count + 1
outlier_dates[date] <- sensex_data$Date[k]
date <- date +1
}
if(z_growth_rate[k] < -3){
count <- count + 1
outlier_dates[date] <- sensex_data$Date[k]
date <- date +1
}
}
count
outlier_dates
data <- read.csv("BSE_Sensex_Index.csv",header= TRUE)
head(data)
names(data)
str(data)
Sample_1000 <- sample(seq(1,length(data[,1])), 1000, replace=T)
Sample_3000 <- sample(seq(1,length(data[,1])), 3000, replace=T)
mean(Sample_1000)
max(Sample_1000)
var(Sample_1000)
mean(Sample_3000)
max(Sample_3000)
var(Sample_3000)
quantile(Sample_1000,.25)
quantile(Sample_3000,.25)
summary(data)
open <- data$Open
high <- data$High
low <- data$Low
close <- data$Close
boxplot (open, high, low, close,
main = "Boxplot for the values",
names = c ("Open", "High", "Low", "Close"),
col = c ("red", "grey","blue","white"),
horizontal = TRUE,
notch = TRUE)
hist(data$Close, ylim = c(0,2000), col="turquoise",main = "BSE Sensex clouser", xlab="Adj Clouser points")
transaction <- read.csv("transactions.csv")
names(transaction)
transaction$TID <- NULL
colnames(transaction) <- c("ItemList")
names(transaction)
write.csv(transaction,'ItemList.csv',quote = FALSE,row.names = TRUE)
install.packages("arules")
library(arules)
txn = read.transactions(file="ItemList.csv",rm.duplicates=TRUE,format="basket",sep=",",cols=1);
txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
basket_rules <- apriori(txn,parameter = list(sup = 0.01,target = "rules"))
if (sessionInfo()['basepkgs']=="tm" | sessionInfo()['otherpkgs']=='tm'){
detach(package:tm,unload=TRUE)
}
inspect(basket_rules)
transaction <- read.csv("transactions.csv")
names(transaction)
transaction$TID <- NULL
colnames(transaction) <- c("ItemList")
names(transaction)
write.csv(transaction,'ItemList.csv',quote = FALSE,row.names = TRUE)
install.packages("arules")
library(arules)
install.packages("arules")
install.packages("arules")
txn = read.transactions(file="ItemList.csv",rm.duplicates=TRUE,format="basket",sep=",",cols=1);
txn@itemInfo$labels <- gsub("\"","",txn@itemInfo$labels)
basket_rules <- apriori(txn,parameter = list(sup = 0.01,target = "rules"))
if (sessionInfo()['basepkgs']=="tm" | sessionInfo()['otherpkgs']=='tm'){
detach(package:tm,unload=TRUE)
}
library(caret)
library(rpart.plot)
data = read.csv("E:/2ndMSIT/Intro_to_ML/DataScience_2019501037/Data_Mining/Late Submission/Solution 3/lenses.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
summary(data)
x = data[,1:4]
y = as.factor(data$Label)
model = rpart(y~.,x,control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0, usesurrogate=0, xval=0,maxdepth=3))
plot(model)
text(model)
rpart.plot(model)
#Information Gain
sum(y==predict(model,x,type="class"))/length(y)
#miscalassification error
1-sum(y==predict(model,x,type="class"))/length(y)
model1 = rpart(y~.,x,control=rpart.control(minsplit=0,minbucket=0,cp=-1, maxcompete=0, maxsurrogate=0, usesurrogate=0, xval=0,maxdepth=3))
plot(model1)
text(model1)
rpart.plot(model1)
#Information Gain
sum(y==predict(model1,x,type="class"))/length(y)
#miscalassification error
1-sum(y==predict(model1,x,type="class"))/length(y)
setwd("E:/2ndMSIT/Intro_to_ML/DataScience_2019501037/Data_Mining/Late Submission/Solution 4")
liver = read.csv("Liver_data.csv", header = FALSE, col.names = c("mcv", "alkphos", "sgpt", "sgot", "gammagt", "drinks","selector"))
str(liver)
liver$selector <- as.factor(liver$selector)
liver$drinks <- cut(liver$drinks, breaks = c(0, 5,10,15,20),
labels = c('C1', 'C2', "C3", 'C4'), right = FALSE)
liver <- na.omit(liver)
train = subset(liver, liver$selector == 1)
str(train)
test = subset(liver, liver$selector == 2)
str(test)
dim(train)
dim(test)
x_train <- subset(train, select = -c(selector, drinks))
x_test <- subset(test, select = -c(selector, drinks))
library(class)
y_train = train[,6, drop = TRUE]
y_test = test[,6, drop = TRUE]
length(train)
length(test)
fit1 = knn(x_train,x_train,y_train,k=1)
1-sum(y_test==fit1)/length(y_test)
fit2 = knn(x_train,x_train,y_train,k=2)
1-sum(y_test==fit2)/length(y_test)
fit3 = knn(x_train,x_train,y_train,k=3)
1-sum(y_test==fit3)/length(y_test)
install.packages("factoextra")
data <- read.csv("E:/2ndMSIT/Intro_to_ML/DataScience_2019501037/Data_Mining/Late Submission/Solution 6/Liver_data.csv",header=FALSE)
set.seed(123)
#no of centers = 4
#nstart - how many random sets should be chosen for 4 centers
#iter.max - maximum number of iterations allowed
res.km <- kmeans(scale(data[,-7]), 4, nstart = 25,iter.max=10)
print(res.km)
fviz_cluster(res.km, data = data[, -7],
palette = c("#2E9FDF", "#273746", "#E7B800","#D35400"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
#plotting and assigning points
library(cluster)
library("factoextra")
fviz_cluster(res.km, data = data[, -7],
palette = c("#2E9FDF", "#273746", "#E7B800","#D35400"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
install.packages("factoextra")
install.packages("factoextra")
data <- read.csv("E:/2ndMSIT/Intro_to_ML/DataScience_2019501037/Data_Mining/Late Submission/Solution 6/Liver_data.csv",header=FALSE)
set.seed(123)
#no of centers = 4
#nstart - how many random sets should be chosen for 4 centers
#iter.max - maximum number of iterations allowed
res.km <- kmeans(scale(data[,-7]), 4, nstart = 25,iter.max=10)
print(res.km)
#plotting and assigning points
library(cluster)
library("factoextra")
fviz_cluster(res.km, data = data[, -7],
palette = c("#2E9FDF", "#273746", "#E7B800","#D35400"),
geom = "point",
ellipse.type = "convex",
ggtheme = theme_bw()
)
getwd()
setwd("E:/2ndMSIT/Intro_to_ML/DataScience_2019501037/Data_Mining/Late Submission/Solution 7")
data = read.csv("Liver_data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "6", "7"))
str(data)
summary(data)
x = data[,1:5]
y = data[,6]
fit = kmeans(x,4)
library(class)
knnfit = knn(fit$centers,x,as.factor(c(-2,-1,1,2)))
error = 1-sum(knnfit == y)/length(y)
error
sensex_data <- read.csv("BSE_Sensex_Index.csv")
sensex_data <- read.csv("E:/2ndMSIT/Intro_to_ML/DataScience_2019501037/Data_Mining/Exam/BSE_Sensex_Index.csv")
View(sensex_data)
growth_rate <- c()
for(i in 1:15446){
growth_rate[i] <- (sensex_data$Close[i] - sensex_data$Close[i+1])/sensex_data$Close[i+1]
}
growth_rate[15447]<- (growth_rate[15446] +growth_rate[15445]+growth_rate[15444])/3
growth_rate[15447]
z_growth_rate <- c()
mean <- mean(growth_rate)
mean
sd <- sd(growth_rate)
sd
for (j in 1:15447){
z_growth_rate[j] <- (growth_rate[j] - mean)/(sd)
}
outlier_dates <- c()
count <- 0
date <- 1
for (k in 1:15447){
if(z_growth_rate[k] > 3){
count <- count + 1
outlier_dates[date] <- sensex_data$Date[k]
date <- date +1
}
if(z_growth_rate[k] < -3){
count <- count + 1
outlier_dates[date] <- sensex_data$Date[k]
date <- date +1
}
}
count
outlier_dates
